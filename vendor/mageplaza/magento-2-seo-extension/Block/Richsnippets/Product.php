<?php

namespace Mageplaza\Seo\Block\Richsnippets;

use Magento\Checkout\Model\Session;
use Magento\Framework\ObjectManagerInterface;
use Magento\Framework\Registry;
use Magento\Framework\View\Element\Template\Context;
use Magento\Review\Model\ResourceModel\Review\CollectionFactory;
use Magento\Review\Model\ReviewFactory;
use Magento\Store\Api\Data\StoreConfigInterface;
use Magento\Theme\Block\Html\Header\Logo;
use Mageplaza\Seo\Block\Richsnippets;
use Mageplaza\Seo\Helper\Data as HelperData;
use Mageplaza\Seo\Helper\Hreflang;
use Magento\Framework\Module\Manager;
use Magento\Framework\App\ObjectManager;

/**
 * Class Product
 * @package Mageplaza\Seo\Block\Richsnippets
 */
class Product extends Richsnippets
{
    /**
     * Mageplaza SeoRule Extension
     */
    const SHOP_BY_BRAND_EXTENSION = 'Mageplaza_Shopbybrand';

    /**
     * @type string - template
     */
    protected $_template = 'richsnippets/jsonld/product.phtml';

    /**
     * @type \Magento\Framework\Module\Manager
     */
    protected $_moduleManager;

    /**
     * @type \Magento\Framework\App\ObjectManager
     */
    protected $_objectManager;

    /**
     * Constructor
     *
     * @param \Magento\Framework\Module\Manager $moduleManager
     * @param \Mageplaza\Seo\Helper\Hreflang $hreflang
     * @param \Magento\Framework\View\Element\Template\Context $context
     * @param \Mageplaza\Seo\Helper\Data $helperData
     * @param \Magento\Framework\ObjectManagerInterface $objectManager
     * @param \Magento\Checkout\Model\Session $session
     * @param \Magento\Framework\Registry $registry
     * @param \Magento\Theme\Block\Html\Header\Logo $logo
     * @param \Magento\Store\Api\Data\StoreConfigInterface $storeConfig
     * @param \Magento\Review\Model\ResourceModel\Review\CollectionFactory $reviewCollectionFactory
     * @param \Magento\Review\Model\ReviewFactory $reviewFactory
     * @param array $data
     */
    public function __construct(
        Manager $moduleManager,
        Hreflang $hreflang,
        Context $context,
        HelperData $helperData,
        ObjectManagerInterface $objectManager,
        Session $session,
        Registry $registry,
        Logo $logo,
        StoreConfigInterface $storeConfig,
        CollectionFactory $reviewCollectionFactory,
        ReviewFactory $reviewFactory,
        array $data = []
    ) {
    
        $this->_moduleManager = $moduleManager;
        $this->_objectManager = ObjectManager::getInstance();
        parent::__construct($hreflang, $context, $helperData, $objectManager, $session, $registry, $logo, $storeConfig, $reviewCollectionFactory, $reviewFactory, $data); // TODO: Change the autogenerated stub
    }

    /**
     * get review collection
     * @return mixed
     */
    public function getReviewCollection()
    {
        if (null === $this->reviewCollection) {
            $this->reviewCollection = $this->registry->create()->addStoreFilter(
                $this->_storeManager->getStore()->getId()
            )->addStatusFilter(
                \Magento\Review\Model\Review::STATUS_APPROVED
            )->addEntityFilter(
                'product',
                $this->getProduct()->getId()
            )->setDateOrder();
        }

        return $this->reviewCollection;
    }

    /**
     * get review count
     * @return mixed
     */
    public function getReviewCount()
    {
        $product = $this->getProduct();
        if (!$product->getRatingSummary()) {
            $this->reviewFactory->create()->getEntitySummary($product, $this->_storeManager->getStore()->getId());
        }

        return $product->getRatingSummary()->getReviewsCount();
    }

    /**
     * get rating summary
     * @return mixed
     */
    public function getRatingSummary()
    {
        $product = $this->getProduct();
        if (!$product->getRatingSummary()) {
            $this->reviewFactory->create()->getEntitySummary($product, $this->_storeManager->getStore()->getId());
        }

        return $product->getRatingSummary()->getRatingSummary();
    }

    /**
     * Check if has Mageplaza ShopByBrand extension
     *
     * @return bool
     */
    public function getBrandLabel()
    {
        if ($this->_moduleManager->isOutputEnabled(self::SHOP_BY_BRAND_EXTENSION) && ($brand = $this->getProductBrand())) {
            return $brand->getValue();
        }

        return false;
    }

    /**
     * Get product brand
     *
     * @return null | Brand
     */
    public function getProductBrand()
    {
        if (!$this->isMageplazaBrandEnabled()) {
            return null;
        }


        /** @type \Mageplaza\Shopbybrand\Helper\Data $helper */
        $brandHelper = $this->_objectManager->create('Mageplaza\Shopbybrand\Helper\Data');

        if (!$brandHelper->isEnabled()) {
            return null;
        }

        $product = $this->getProduct();
        $attCode = $brandHelper->getAttributeCode();
        if ($optionId = $product->getData($attCode)) {
            /** @type \Mageplaza\Shopbybrand\Model\Brand $brand */
            $brand = $this->_objectManager->create('Mageplaza\Shopbybrand\Model\Brand');

            return $brand->loadByOption($optionId);
        }

        return null;
    }

    /**
     * check Mageplaza shop by brand enable
     * @return bool
     */
    public function isMageplazaBrandEnabled()
    {
        return $this->helperData->checkModuleActive('Mageplaza_Shopbybrand');
    }
}
